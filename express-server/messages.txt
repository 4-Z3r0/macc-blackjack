I -> implemented

---Client --> Server---
(All client messages should have client username (and key or encrypted with the key))

LOGIN: {action: <login>}
JOIN_ROOM: {action: "join_room", room_id:<room_id>}
CREATE_ROOM: {action: "create_room"}
READY_UP:{action: "ready_up}

(These messages should also have the game id)

HIT: {action: "hit"}
HOLD: {action: "hold"}
FOLD: {action: "fold"}
BET: {action: "bet" , value: <value-of-bet>}
EXIT: {action: "exit"}


---Server --> Client---

RES_JOIN_ROOM: {status: success/fail, key:<key>, error_message:<e.g. room_full>}
RES_CREATE_ROOM: {status: success/fail, room_id: <room_id>, key:<key>}

RES_HIT: {status: success/fail , new_card: <new_card_object>, hand_value:<updated_value_of_the_hand>}
UPDATE_OP: {username: <username>, new_card: <new_card_object>, hand_value:<updated_value_of_the_hand>} <-- updates opponents cards
YOUR_TURN: {message:"your turn"} <-- Indicates player can make an action
RES_HOLD: {status: success/fail}
RES_FOLD: {status: success/fail}
RES_BET: {status: success/fail, new_balance:<new_balance>}
RES_EXIT: {status: success/fail}
TIMEOUT: {message: "You have timed out"}
ROUND_END: {new_balance: <balance_of_player>}
DEAL_CARDS: {{username1: <hand1>, username2: <hand2>}} <--Dictionary, key is username, value is a hand object with the player's cards
GAME_START: {balance: <balance>}
BETS_OK: {message: "All bets accepted - Round Start"}
//UPDATE_DEALER: {dealer_hand: <hand_Object_with_dealer_cards>} <-- se decidirmos implementar dealer

//Enviar o valor das cartas
Enviar cartas novas em vez de todas