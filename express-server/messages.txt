I -> implemented

---Client --> Server---
(All client messages should have client username (and key or encrypted with the key))

LOGIN: {action: <login>}
JOIN_ROOM: {action: "join_room", room_id:<room_id>} //doesnt need key, key is set up here
CREATE_ROOM: {action: "create_room"} //doesnt need key, key is set up here
READY_UP:{action: "ready_up"}

(These messages should also have the game id)

HIT: {action: "hit"}
HOLD: {action: "hold"}
FOLD: {action: "fold"} //(?)
BET: {action: "bet" , value: <value-of-bet>}
EXIT: {action: "exit"}


---Server --> Client---

RES_JOIN_ROOM: {type:"res_join_room", status: success/fail, key:<key>, error_message:<e.g. room_full>}
RES_CREATE_ROOM: {type:"res_create_room", status: success/fail, room_id: <room_id>, key:<key>}

RES_HIT: {type:"res_hit", status: success/fail , new_card: <new_card_object>, hand_value:<updated_value_of_the_hand>}
UPDATE_OP: {type:"update_op", username: <username>, new_card: <new_card_object>, hand_value:<updated_value_of_the_hand>} <-- updates opponents cards
YOUR_TURN: {type:"your_turn"} <-- Indicates player can make an action
RES_HOLD: {type:"res_hold",status: success/fail}
RES_FOLD: {type:"res_fold",status: success/fail}
RES_BET: {type:"res_bet",status: success/fail, new_balance:<new_balance>}
RES_EXIT: {type:"res_exit",status: success/fail}
RES_READY: {type:"res_ready",status: success/fail}
TIMEOUT: {type: "timeout"}
ROUND_END: {type:"round_end",result: "win/loss", new_balance: <balance_of_player>}
DEAL_CARDS: {type:"deal_card", cards:{username1: <hand1>, username2: <hand2>}} <--Dictionary, key is username, value is a hand object with the player's cards
GAME_START: {type:"game_start", players:[<list_of_players>]} //each player is a object -> {username: player.username, balance: player.money}
BETS_OK: {type: "bets_ok"}
//UPDATE_DEALER: {dealer_hand: <hand_Object_with_dealer_cards>} <-- se decidirmos implementar dealer
